{
  "Uuid": "8b0b6377-7785-4cf2-87b7-d83c1df8a6b8",
  "IsCustomNode": false,
  "Description": "",
  "Name": "01_element_確認",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Revitの現在のドキュメントを取得\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# 入力(IN[0])をリスト形式に変換（単一要素の場合にも対応）\r\ninput_elements = IN[0]\r\nif not isinstance(input_elements, list):\r\n    input_elements = [input_elements]\r\n\r\n# Revit要素を取得（ElementIdか既に要素かを判定して処理）\r\nselection = []\r\nfor item in input_elements:\r\n    # Dynamo の入力要素が ElementWrapper の場合に対応\r\n    element = UnwrapElement(item)\r\n    if isinstance(element, Element):  # Revit 要素かどうかを確認\r\n        selection.append(element)\r\n    elif isinstance(element, ElementId):  # ElementId の場合\r\n        selection.append(doc.GetElement(element))\r\n\r\n# 出力リスト\r\noutput = []\r\n\r\nfor element in selection:\r\n    element_data = {}\r\n    \r\n    # ファミリ名\r\n    family = element.Symbol.Family if hasattr(element, \"Symbol\") and element.Symbol else None\r\n    element_data[\"Family Name\"] = family.Name if family else None\r\n    \r\n    # タイプ名\r\n    element_data[\"Type Name\"] = element.Name if element else None\r\n    \r\n    # カテゴリ\r\n    category = element.Category\r\n    element_data[\"Category\"] = category.Name if category else None\r\n    \r\n    # カテゴリのパラメータ（GetParametersを使用）\r\n    category_params = {}\r\n    if category:\r\n        try:\r\n            for param in category.GetParameters():\r\n                if param.StorageType == StorageType.String:\r\n                    category_params[param.Definition.Name] = param.AsString()\r\n                elif param.StorageType == StorageType.Double:\r\n                    category_params[param.Definition.Name] = param.AsDouble()\r\n                elif param.StorageType == StorageType.Integer:\r\n                    category_params[param.Definition.Name] = param.AsInteger()\r\n                elif param.StorageType == StorageType.ElementId:\r\n                    category_params[param.Definition.Name] = param.AsElementId().ToString()\r\n        except AttributeError:\r\n            # カテゴリにパラメータがない場合はスキップ\r\n            category_params = {}\r\n    element_data[\"Category Parameters\"] = category_params\r\n    \r\n    # インスタンスパラメータ\r\n    instance_params = {}\r\n    for param in element.Parameters:\r\n        if param.StorageType == StorageType.String:\r\n            instance_params[param.Definition.Name] = param.AsString()\r\n        elif param.StorageType == StorageType.Double:\r\n            instance_params[param.Definition.Name] = param.AsDouble()\r\n        elif param.StorageType == StorageType.Integer:\r\n            instance_params[param.Definition.Name] = param.AsInteger()\r\n        elif param.StorageType == StorageType.ElementId:\r\n            instance_params[param.Definition.Name] = param.AsElementId().ToString()\r\n    element_data[\"Instance Parameters\"] = instance_params\r\n    \r\n    # タイプパラメータ\r\n    type_params = {}\r\n    if hasattr(element, \"Symbol\") and element.Symbol:\r\n        for param in element.Symbol.Parameters:\r\n            if param.StorageType == StorageType.String:\r\n                type_params[param.Definition.Name] = param.AsString()\r\n            elif param.StorageType == StorageType.Double:\r\n                type_params[param.Definition.Name] = param.AsDouble()\r\n            elif param.StorageType == StorageType.Integer:\r\n                type_params[param.Definition.Name] = param.AsInteger()\r\n            elif param.StorageType == StorageType.ElementId:\r\n                type_params[param.Definition.Name] = param.AsElementId().ToString()\r\n    element_data[\"Type Parameters\"] = type_params\r\n    \r\n    output.append(element_data)\r\n\r\n# 出力\r\nOUT = output\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4e5ef7e54ca446b28eed5810fdd4f21e",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "c219696d7d7040dc8d31037b9ccda3c8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2057fc9e776548cc8a8542273cb63a33",
          "Name": "OUT",
          "Description": "Python スクリプトの結果",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "埋め込み Python スクリプトを実行します。"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "5b93f489-946d-43b2-a6ab-c16eff723248-00058d2c"
      ],
      "Id": "01ff51a207514b329c98bd598024cec2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4e8c6b9ee1f649f9825432b5f9b36d00",
          "Name": "Element",
          "Description": "選択した要素。",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "ドキュメントからモデル要素を選択します。"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Revitの現在のドキュメントを取得\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Dynamoからの入力をリスト形式に変換（単一選択の場合も対応）\r\ninput_elements = IN[0]\r\nif not isinstance(input_elements, list):\r\n    input_elements = [input_elements]\r\n\r\n# Revit要素を取得\r\nselection = []\r\nfor item in input_elements:\r\n    # Dynamoからの入力はラップされているのでUnwrapElementを使う\r\n    try:\r\n        element = UnwrapElement(item)\r\n        if isinstance(element, Element):\r\n            selection.append(element)\r\n    except:\r\n        pass  # 無効な入力があった場合はスキップ\r\n\r\n# 出力リスト\r\noutput = []\r\n\r\nfor element in selection:\r\n    element_data = {}\r\n\r\n    try:\r\n        # 基本情報\r\n        element_data[\"Id\"] = element.Id.IntegerValue\r\n        element_data[\"Name\"] = element.Name\r\n        element_data[\"Category\"] = element.Category.Name if element.Category else None\r\n\r\n        # すべてのパラメータを取得\r\n        parameters = {}\r\n        for param in element.Parameters:\r\n            try:\r\n                if param.StorageType == StorageType.String:\r\n                    parameters[param.Definition.Name] = param.AsString()\r\n                elif param.StorageType == StorageType.Double:\r\n                    parameters[param.Definition.Name] = param.AsDouble()\r\n                elif param.StorageType == StorageType.Integer:\r\n                    parameters[param.Definition.Name] = param.AsInteger()\r\n                elif param.StorageType == StorageType.ElementId:\r\n                    parameters[param.Definition.Name] = param.AsElementId().IntegerValue\r\n            except Exception as e:\r\n                parameters[param.Definition.Name] = str(e)\r\n        element_data[\"Parameters\"] = parameters\r\n\r\n        # 型（Symbol）のパラメータも取得\r\n        if hasattr(element, \"Symbol\") and element.Symbol:\r\n            symbol_params = {}\r\n            for param in element.Symbol.Parameters:\r\n                try:\r\n                    if param.StorageType == StorageType.String:\r\n                        symbol_params[param.Definition.Name] = param.AsString()\r\n                    elif param.StorageType == StorageType.Double:\r\n                        symbol_params[param.Definition.Name] = param.AsDouble()\r\n                    elif param.StorageType == StorageType.Integer:\r\n                        symbol_params[param.Definition.Name] = param.AsInteger()\r\n                    elif param.StorageType == StorageType.ElementId:\r\n                        symbol_params[param.Definition.Name] = param.AsElementId().IntegerValue\r\n                except Exception as e:\r\n                    symbol_params[param.Definition.Name] = str(e)\r\n            element_data[\"Type Parameters\"] = symbol_params\r\n\r\n    except Exception as e:\r\n        element_data[\"Error\"] = str(e)\r\n\r\n    output.append(element_data)\r\n\r\n# 出力\r\nOUT = output\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "e395b1172e34429780541570d2e19b9e",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "9fb18606a41f433daa48e4c5f76a72b1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b0aff6cd03a24080bd06734571f114b0",
          "Name": "OUT",
          "Description": "Python スクリプトの結果",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "埋め込み Python スクリプトを実行します。"
    }
  ],
  "Connectors": [
    {
      "Start": "4e8c6b9ee1f649f9825432b5f9b36d00",
      "End": "9fb18606a41f433daa48e4c5f76a72b1",
      "Id": "88685ede93574b30a225c08e01e59ffa",
      "IsHidden": "False"
    },
    {
      "Start": "4e8c6b9ee1f649f9825432b5f9b36d00",
      "End": "c219696d7d7040dc8d31037b9ccda3c8",
      "Id": "da87d8c3360a4f538efa3101ed73c04a",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "EnableLegacyPolyCurveBehavior": null,
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "プロパティ",
      "Version": "3.2",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "8.2",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "なし",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "3.2.2.5494",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "背景プレビュー(_B)",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "4e5ef7e54ca446b28eed5810fdd4f21e",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 380.0,
        "Y": 164.0000000000001
      },
      {
        "Id": "01ff51a207514b329c98bd598024cec2",
        "Name": "Select Model Element",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 454.8,
        "Y": 424.4
      },
      {
        "Id": "e395b1172e34429780541570d2e19b9e",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 815.6000000000001,
        "Y": 330.00000000000006
      }
    ],
    "Annotations": [],
    "X": -220.40000000000003,
    "Y": -125.20000000000005,
    "Zoom": 1.0
  }
}